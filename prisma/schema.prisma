generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  password_hash    String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  // Relations
  permissions      Permission[]
  sentInvitations  Invitation[]  @relation("SentInvitations")
  notes            Note[]
  folders          Folder[]
}

model Note {
  id                 String    @id @default(uuid())
  title              String
  content_markdown   String?
  folder_id          String?
  owner_id           String
  is_public          Boolean   @default(false)
  public_share_token String?   @unique
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  current_version_id String?
  yjs_doc_state      Bytes?

  // Relations
  owner           User        @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  folder          Folder?     @relation(fields: [folder_id], references: [id])
}

model Folder {
  id                 String    @id @default(uuid())
  name               String
  parent_folder_id   String?
  owner_id           String
  is_public          Boolean   @default(false)
  public_share_token String?   @unique
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  // Relations
  owner         User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  parent_folder Folder?   @relation("FolderToFolder", fields: [parent_folder_id], references: [id])
  sub_folders   Folder[]  @relation("FolderToFolder")
  notes         Note[]
}

model Permission {
  id          String   @id @default(uuid())
  user_id     String
  entity_type String   // 'note' or 'folder'
  entity_id   String
  access_level String  // 'view' or 'edit'
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Unique constraint to ensure a user only has one permission record per entity
  @@unique([user_id, entity_type, entity_id])
}

model Invitation {
  id            String   @id @default(uuid())
  inviter_id    String
  invitee_email String
  entity_type   String   // 'note' or 'folder'
  entity_id     String
  access_level  String   // 'view' or 'edit'
  status        String   @default("pending") // 'pending', 'accepted', 'declined'
  token         String   @unique
  expires_at    DateTime
  createdAt     DateTime @default(now())
  
  // Relations
  inviter      User     @relation("SentInvitations", fields: [inviter_id], references: [id], onDelete: Cascade)
}
