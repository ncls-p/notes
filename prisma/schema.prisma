// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  folders         Folder[]
  ownedNotes      Note[]           @relation("OwnedNotes")
  authoredVersions NoteVersion[]
  permissions     Permission[]
  invitationsSent Invitation[]     @relation("Inviter")
  aiConfigs       UserAiConfig[]
  aiUsageLogs     AiUsageLog[]
  webhooks        Webhook[]

  @@map("users")
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  parentId  String?  @map("parent_folder_id")
  ownerId   String   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner       User     @relation(fields: [ownerId], references: [id])
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Folder[] @relation("FolderHierarchy")
  notes       Note[]

  @@map("folders")
}

model Note {
  id                 String   @id @default(uuid())
  title              String
  contentMarkdown    String?  @map("content_markdown") @db.Text
  yjsDocState        Bytes?   @map("yjs_doc_state")
  folderId           String?  @map("folder_id")
  ownerId            String   @map("owner_id")
  isPublic           Boolean  @default(false) @map("is_public")
  publicShareToken   String?  @unique @map("public_share_token")
  currentVersionId   String?  @unique @map("current_version_id") // Made unique as it points to one specific version
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  folder          Folder?        @relation(fields: [folderId], references: [id])
  owner           User           @relation(name: "OwnedNotes", fields: [ownerId], references: [id])
  currentVersion  NoteVersion?   @relation("CurrentNoteVersion", fields: [currentVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  versions        NoteVersion[]  @relation("NoteVersions")
  chunks          NoteChunk[]
  permissions     Permission[]

  @@map("notes")
}

model NoteVersion {
  id           String   @id @default(uuid())
  noteId       String   @map("note_id")
  contentDiff  Json?    @map("content_diff") // Or String if full content
  createdAt    DateTime @default(now()) @map("created_at")
  authorId     String?  @map("author_id")

  note   Note @relation(name: "NoteVersions", fields: [noteId], references: [id], onDelete: Cascade)
  author User? @relation(fields: [authorId], references: [id])
  noteHead Note? @relation("CurrentNoteVersion") // Inverse relation for currentVersionId

  @@map("note_versions")
}

model NoteChunk {
  id          String   @id @default(uuid())
  noteId      String   @map("note_id")
  chunkText   String   @map("chunk_text") @db.Text
  // Using 1536 dimensions for OpenAI text-embedding-ada-002
  embedding   Unsupported("vector(1536)")
  createdAt   DateTime @default(now()) @map("created_at")

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_chunks")
}

model Permission {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  entityType  String   @map("entity_type") // e.g., 'note', 'folder'
  entityId    String   @map("entity_id")
  accessLevel String   @map("access_level") // e.g., 'view', 'edit'
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note? @relation(fields: [entityId], references: [id]) // Assuming entityId can be a noteId
  // folder Folder? @relation(fields: [entityId], references: [id]) // Add if folders can have direct permissions

  @@unique([userId, entityType, entityId])
  @@map("permissions")
}

model Invitation {
  id           String   @id @default(uuid())
  inviterId    String   @map("inviter_id")
  inviteeEmail String   @map("invitee_email")
  entityType   String   @map("entity_type")
  entityId     String   @map("entity_id")
  accessLevel  String   @map("access_level")
  status       String   @default("pending") // e.g., 'pending', 'accepted', 'declined'
  token        String   @unique
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  inviter User @relation("Inviter", fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model UserAiConfig {
  id                      String    @id @default(uuid())
  userId                  String    @map("user_id")
  name                    String
  apiProviderType         String    @map("api_provider_type") // e.g., 'openai', 'ollama', 'custom_openai_compatible'
  baseUrl                 String?   @map("base_url")
  encryptedApiKey         Bytes?    @map("encrypted_api_key")
  modelsConfig            Json?     @map("models_config")
  isDefaultChat           Boolean   @default(false) @map("is_default_chat")
  isDefaultEmbedding      Boolean   @default(false) @map("is_default_embedding")
  isDefaultTranscription  Boolean   @default(false) @map("is_default_transcription")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiUsageLogs  AiUsageLog[]

  @@unique([userId, name])
  @@map("user_ai_configs")
}

model AiUsageLog {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  aiConfigId       String?  @map("ai_config_id")
  modelId          String   @map("model_id")
  requestType      String   @map("request_type") // e.g., 'chat', 'embedding', 'transcription'
  inputTokens      Int?     @map("input_tokens")
  outputTokens     Int?     @map("output_tokens")
  costEstimateUsd  Decimal? @map("cost_estimate_usd") @db.Decimal(10, 6)
  timestamp        DateTime @default(now())

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiConfig UserAiConfig? @relation(fields: [aiConfigId], references: [id], onDelete:SetNull)

  @@map("ai_usage_logs")
}

model Webhook {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  name            String
  targetUrl       String   @map("target_url")
  encryptedSecret Bytes?   @map("encrypted_secret")
  events          String[]
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}