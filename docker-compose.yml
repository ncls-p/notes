services:
  # OPTIONAL but Recommended: Reverse Proxy (e.g., Nginx or Caddy)
  # nginx-proxy:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/certs:/etc/nginx/certs:ro # For SSL certificates
  #   depends_on:
  #     - nextjs-app

  # 1. Next.js Application (Frontend & Backend API)
  nextjs-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Frontend specific (can be prefixed with NEXT_PUBLIC_)
      NEXT_PUBLIC_APP_NAME: "MyNotesApp"
      # Backend specific (not prefixed with NEXT_PUBLIC_ unless needed by client)
      JWT_SECRET: ${JWT_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      APP_ENCRYPTION_KEY: ${APP_ENCRYPTION_KEY} # For encrypting API keys and other sensitive data
      # Database configuration for Docker environments
      DB_HOST: postgres
      DB_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Override DATABASE_URL to use new host configuration
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      # Logging/Metrics/Tracing config
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NODE_ENV: ${NODE_ENV:-development}
      # For Next.js custom server if used (e.g. for WebSockets)
      PORT: ${PORT:-3000}
      HOSTNAME: ${HOSTNAME:-localhost}
    depends_on:
      postgres:
        condition: service_healthy
      # redis: # If using Redis for queues/caching
      #   condition: service_healthy
    # volumes:
    # - .:/app # Mount current directory for development; adjust for production
    # - /app/node_modules # Exclude node_modules from host mount
    # - /app/.next # Exclude .next from host mount
    # - app_data:/app/data # For temporary files, logs if not sent to stdout and if needed
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"] # Health endpoint check for Docker environment
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 2. Database: PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16 # Pre-built image with pgvector for Postgres 16
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Optional: Expose Postgres for local tools
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent data volume
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Redis for caching, job queues (webhooks, Yjs state persistence)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 2s
  #     retries: 5

volumes:
  postgres_data:
  # app_data: # If used for persistent application data outside of DB
  # redis_data:
