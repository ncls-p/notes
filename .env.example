# .env.example - Environment variables for the Notes application
# Copy this file to .env and fill in your actual values.

# -------------------------------------
# Next.js Application (nextjs-app service)
# -------------------------------------

# Publicly accessible by the client-side Next.js application
NEXT_PUBLIC_APP_NAME="MyNotesApp"

# Application Behavior (used by the Next.js server)
NODE_ENV="development"  # Environment mode: 'development', 'production', or 'test'
LOG_LEVEL="info"        # Logging verbosity: 'trace', 'debug', 'info', 'warn', 'error', 'fatal'
PORT="3000"             # Port the Next.js app will run on inside the container
HOSTNAME="0.0.0.0"      # Hostname the Next.js app will bind to (0.0.0.0 for Docker)
# -------------------------------------
# Security
# -------------------------------------

# Secret key for signing JWT tokens.
# Generate a strong, random string (e.g., using `openssl rand -hex 32`)
JWT_SECRET=""

# Secret key for signing refresh tokens.
# Generate a strong, random string (e.g., using `openssl rand -hex 32`)
REFRESH_TOKEN_SECRET=""

# Secret key for application-level encryption (e.g., encrypting API keys stored in DB).
# Must be a 32-byte (256-bit) hex-encoded string.
# Generate using `openssl rand -hex 32`
APP_ENCRYPTION_KEY=""
# -------------------------------------
# Database Connection (PostgreSQL with pgvector)
# -------------------------------------

# These variables are used by the 'postgres' service in docker-compose.yml
POSTGRES_USER="notesuser"
POSTGRES_PASSWORD="notespassword"
POSTGRES_DB="notesdb"

# Port on the HOST machine that maps to the PostgreSQL container's port 5432.
# This is useful if you want to connect to the database from your host machine using a tool like psql or a GUI.
# The default is 5432, but can be changed if that port is already in use on your host.
POSTGRES_PORT="5432"

# Database port used by the application to connect to PostgreSQL
# For local development, this should match POSTGRES_PORT
DB_PORT="5432"

# Database host - configurable for different environments
# For Docker Compose: use 'postgres' (service name)
# For local development: use 'localhost'
# For production: use your actual database host
DB_HOST="localhost"

# Database URL used by Prisma and the Next.js application to connect to the PostgreSQL database.
# Note: This is now constructed dynamically in lib/db.ts using DB_HOST and other variables
# Legacy format (kept for reference): postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
# For production with SSL, you might need to adjust sslmode and potentially add ?sslrootcert=/path/to/ca.pem

# -------------------------------------
# Optional: Redis (if uncommented in docker-compose.yml)
# -------------------------------------
# REDIS_HOST="redis"
# REDIS_PORT="6379"
# REDIS_PASSWORD="" # Set if your Redis instance requires a password
# REDIS_URL="redis://${REDIS_HOST}:${REDIS_PORT}"